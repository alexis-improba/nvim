-- Made with 'mini.colors' module of https://github.com/echasnovski/mini.nvim

if vim.g.colors_name ~= nil then vim.cmd('highlight clear') end
vim.g.colors_name = "tundra"

-- Highlight groups
local hi = vim.api.nvim_set_hl

hi(0, "@attribute", { link = "Constant" })
hi(0, "@character.special", { link = "SpecialChar" })
hi(0, "@conditional", { link = "Conditional" })
hi(0, "@const.builtin", { fg = "#fbc19d" })
hi(0, "@const.macro", { link = "Macro" })
hi(0, "@constructor", { link = "Function" })
hi(0, "@debug", { link = "Debug" })
hi(0, "@define", { link = "PreProc" })
hi(0, "@error", { link = "Error" })
hi(0, "@exception", { link = "Exception" })
hi(0, "@field", { fg = "#ddd6fe" })
hi(0, "@float", { link = "Float" })
hi(0, "@function.builtin", { fg = "#fbc19d" })
hi(0, "@function.call", { link = "Function" })
hi(0, "@function.macro", { fg = "#fbc19d" })
hi(0, "@include", { link = "Include" })
hi(0, "@keyword.function", { link = "Keyword" })
hi(0, "@keyword.operator", { link = "Operator" })
hi(0, "@keyword.return", { link = "Keyword" })
hi(0, "@lsp.type.boolean", { link = "@boolean" })
hi(0, "@lsp.type.builtinType", { link = "@type.builtin" })
hi(0, "@lsp.type.comment", { link = "@comment" })
hi(0, "@lsp.type.enum", { link = "@type" })
hi(0, "@lsp.type.enumMember", { link = "@constant" })
hi(0, "@lsp.type.escapeSequence", { link = "@string.escape" })
hi(0, "@lsp.type.formatSpecifier", { link = "@punctuation.special" })
hi(0, "@lsp.type.interface", vim.empty_dict())
hi(0, "@lsp.type.keyword", { link = "@keyword" })
hi(0, "@lsp.type.namespace", { link = "@namespace" })
hi(0, "@lsp.type.number", { link = "@number" })
hi(0, "@lsp.type.operator", { link = "@operator" })
hi(0, "@lsp.type.parameter", { link = "@parameter" })
hi(0, "@lsp.type.property", { link = "@property" })
hi(0, "@lsp.type.selfKeyword", { link = "@variable.builtin" })
hi(0, "@lsp.type.typeAlias", { link = "@type.definition" })
hi(0, "@lsp.type.unresolvedReference", { link = "@error" })
hi(0, "@lsp.type.variable", vim.empty_dict())
hi(0, "@lsp.typemod.class.defaultLibrary", { link = "@type.builtin" })
hi(0, "@lsp.typemod.enum.defaultLibrary", { link = "@type.builtin" })
hi(0, "@lsp.typemod.enumMember.defaultLibrary", { link = "@constant.builtin" })
hi(0, "@lsp.typemod.function.defaultLibrary", { link = "@function.builtin" })
hi(0, "@lsp.typemod.keyword.async", { link = "@keyword.coroutine" })
hi(0, "@lsp.typemod.macro.defaultLibrary", { link = "@function.builtin" })
hi(0, "@lsp.typemod.method.defaultLibrary", { link = "@function.builtin" })
hi(0, "@lsp.typemod.operator.injected", { link = "@operator" })
hi(0, "@lsp.typemod.string.injected", { link = "@string" })
hi(0, "@lsp.typemod.type.defaultLibrary", { link = "@type.builtin" })
hi(0, "@lsp.typemod.variable.defaultLibrary", { link = "@variable.builtin" })
hi(0, "@lsp.typemod.variable.injected", { link = "@variable" })
hi(0, "@markup.heading.1.delimiter.vimdoc", { bg = "#111827", fg = "#111827", nocombine = true, sp = "#f9fafb", underdouble = true })
hi(0, "@markup.heading.2.delimiter.vimdoc", { bg = "#111827", fg = "#111827", nocombine = true, sp = "#f9fafb", underline = true })
hi(0, "@method", { link = "Function" })
hi(0, "@method.call", { link = "Function" })
hi(0, "@namespace", { fg = "#fca5a5" })
hi(0, "@parameter", { fg = "#ddd6fe" })
hi(0, "@parameter.reference", { link = "@parameter" })
hi(0, "@preproc", { link = "PreProc" })
hi(0, "@property", { link = "@field" })
hi(0, "@punct.bracket", { link = "Delimiter" })
hi(0, "@punct.delimiter", { link = "Delimiter" })
hi(0, "@punct.special", { link = "Delimiter" })
hi(0, "@repeat", { link = "Repeat" })
hi(0, "@storageclass", { link = "StorageClass" })
hi(0, "@string.escape", { fg = "#fca5a5" })
hi(0, "@string.regex", { fg = "#fca5a5" })
hi(0, "@string.special", { link = "String" })
hi(0, "@symbol", { link = "Special" })
hi(0, "@tag", { fg = "#fca5a5" })
hi(0, "@tag.attribute", { link = "@parameter" })
hi(0, "@tag.delimiter", { link = "Comment" })
hi(0, "@text", { fg = "#f9fafb" })
hi(0, "@text.danger", { bold = true, fg = "#fca5a5" })
hi(0, "@text.emphasis", { fg = "#a5b4fc" })
hi(0, "@text.environment", { link = "Macro" })
hi(0, "@text.environment.name", { link = "Type" })
hi(0, "@text.literal", { link = "String" })
hi(0, "@text.math", { link = "Special" })
hi(0, "@text.note", { bold = true, fg = "#a5b4fc" })
hi(0, "@text.reference", { link = "Constant" })
hi(0, "@text.strike", { strikethrough = true })
hi(0, "@text.strong", { fg = "#fca5a5" })
hi(0, "@text.title", { link = "Keyword" })
hi(0, "@text.todo", { link = "Todo" })
hi(0, "@text.underline", { underline = true })
hi(0, "@text.uri", { fg = "#fecdd3" })
hi(0, "@text.warning", { bold = true, fg = "#fbc19d" })
hi(0, "@type.builtin", { fg = "#fca5a5" })
hi(0, "@type.definition", { link = "Type" })
hi(0, "@type.qualifier", { link = "Type" })
hi(0, "@variable", { fg = "#e5e7eb" })
hi(0, "@variable.builtin", { fg = "#fbc19d" })
hi(0, "Boolean", { fg = "#fbc19d" })
hi(0, "Character", { link = "String" })
hi(0, "CmpItemAbbrDefault", { fg = "#f9fafb" })
hi(0, "CmpItemAbbrDeprecatedDefault", { fg = "#6b7280" })
hi(0, "CmpItemAbbrMatchDefault", { fg = "#f9fafb" })
hi(0, "CmpItemAbbrMatchFuzzyDefault", { fg = "#f9fafb" })
hi(0, "CmpItemKindClassDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindColorDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindConstantDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindConstructorDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindDefault", { fg = "#bae6fd" })
hi(0, "CmpItemKindEnumDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindEnumMemberDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindEventDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindFieldDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindFileDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindFolderDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindFunctionDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindInterfaceDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindKeywordDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindMethodDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindModuleDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindOperatorDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindPropertyDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindReferenceDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindSnippetDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindStructDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindTextDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindTypeParameterDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindUnitDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindValueDefault", { link = "CmpItemKind" })
hi(0, "CmpItemKindVariableDefault", { link = "CmpItemKind" })
hi(0, "CmpItemMenuDefault", { fg = "#f9fafb" })
hi(0, "ColorColumn", { bg = "#1f2937" })
hi(0, "Comment", { fg = "#6b7280" })
hi(0, "Conceal", { fg = "#6b7280" })
hi(0, "Conditional", { fg = "#fecdd3" })
hi(0, "Constant", { fg = "#fbc19d" })
hi(0, "CopilotSuggestion", { ctermfg = 244, fg = "#808080" })
hi(0, "CurSearch", { link = "IncSearch" })
hi(0, "Cursor", { bg = "#f9fafb", fg = "#111827" })
hi(0, "CursorColumn", { link = "CursorLine" })
hi(0, "CursorLine", { bg = "#1f2937" })
hi(0, "CursorLineNr", { bold = true, fg = "#fbc19d" })
hi(0, "Delimiter", { fg = "#9ca3af" })
hi(0, "DiagnosticError", { bold = true, fg = "#fca5a5" })
hi(0, "DiagnosticHint", { bold = true, fg = "#b5e8b0" })
hi(0, "DiagnosticInfo", { bold = true, fg = "#a5b4fc" })
hi(0, "DiagnosticWarn", { bold = true, fg = "#fbc19d" })
hi(0, "DiffAdd", { bg = "#1f343d" })
hi(0, "DiffChange", { bg = "#28304d" })
hi(0, "DiffDelete", { bg = "#3b2c3c", fg = "#4c384c" })
hi(0, "DiffText", { bg = "#424674" })
hi(0, "Directory", { fg = "#bae6fd" })
hi(0, "EndOfBuffer", { fg = "#111827" })
hi(0, "Error", { fg = "#fca5a5" })
hi(0, "ErrorMsg", { fg = "#fca5a5" })
hi(0, "Exception", { link = "Keyword" })
hi(0, "FloatBorder", vim.empty_dict())
hi(0, "FoldColumn", { fg = "#6b7280" })
hi(0, "Folded", { bg = "#0e1420", fg = "#6b7280" })
hi(0, "Function", { fg = "#bae6fd" })
hi(0, "Identifier", vim.empty_dict())
hi(0, "IncSearch", { bg = "#b5e8b0", bold = true, fg = "#111827" })
hi(0, "Keyword", { fg = "#fca5a5" })
hi(0, "Label", { link = "Function" })
hi(0, "LineNr", { fg = "#4b5563" })
hi(0, "LspCodeLens", { fg = "#6b7280" })
hi(0, "LspCodeLensSeparator", { fg = "#1f2937" })
hi(0, "LspInlayHint", { fg = "#6b7280" })
hi(0, "LspReferenceRead", { bg = "#334155" })
hi(0, "LspReferenceText", { bg = "#334155" })
hi(0, "LspReferenceWrite", { bg = "#334155" })
hi(0, "LspSignatureActiveParameter", { fg = "#a5b4fc" })
hi(0, "MatchParen", { bold = true, fg = "#fbc19d" })
hi(0, "MiniHipatterns_1b1b1b_bg", { bg = "#1b1b1b", fg = "#ffffff" })
hi(0, "MiniHipatterns_223249_bg", { bg = "#223249", fg = "#ffffff" })
hi(0, "MiniHipatterns_2d4f67_bg", { bg = "#2d4f67", fg = "#ffffff" })
hi(0, "MiniHipatterns_303030_bg", { bg = "#303030", fg = "#ffffff" })
hi(0, "MiniHipatterns_373e50_bg", { bg = "#373e50", fg = "#ffffff" })
hi(0, "MiniHipatterns_445f96_bg", { bg = "#445f96", fg = "#ffffff" })
hi(0, "MiniHipatterns_4b4a1c_bg", { bg = "#4b4a1c", fg = "#ffffff" })
hi(0, "MiniHipatterns_537788_bg", { bg = "#537788", fg = "#ffffff" })
hi(0, "MiniHipatterns_586e62_bg", { bg = "#586e62", fg = "#ffffff" })
hi(0, "MiniHipatterns_658594_bg", { bg = "#658594", fg = "#000000" })
hi(0, "MiniHipatterns_69827b_bg", { bg = "#69827b", fg = "#000000" })
hi(0, "MiniHipatterns_6a824f_bg", { bg = "#6a824f", fg = "#000000" })
hi(0, "MiniHipatterns_6b2325_bg", { bg = "#6b2325", fg = "#ffffff" })
hi(0, "MiniHipatterns_6e6b66_bg", { bg = "#6e6b66", fg = "#ffffff" })
hi(0, "MiniHipatterns_6f5f4b_bg", { bg = "#6f5f4b", fg = "#ffffff" })
hi(0, "MiniHipatterns_716e61_bg", { bg = "#716e61", fg = "#ffffff" })
hi(0, "MiniHipatterns_787878_bg", { bg = "#787878", fg = "#000000" })
hi(0, "MiniHipatterns_7a8382_bg", { bg = "#7a8382", fg = "#000000" })
hi(0, "MiniHipatterns_7aa89f_bg", { bg = "#7aa89f", fg = "#000000" })
hi(0, "MiniHipatterns_7fb4ca_bg", { bg = "#7fb4ca", fg = "#000000" })
hi(0, "MiniHipatterns_827f79_bg", { bg = "#827f79", fg = "#000000" })
hi(0, "MiniHipatterns_87a987_bg", { bg = "#87a987", fg = "#000000" })
hi(0, "MiniHipatterns_938aa9_bg", { bg = "#938aa9", fg = "#000000" })
hi(0, "MiniHipatterns_969438_bg", { bg = "#969438", fg = "#000000" })
hi(0, "MiniHipatterns_98bb6c_bg", { bg = "#98bb6c", fg = "#000000" })
hi(0, "MiniHipatterns_9fb5c9_bg", { bg = "#9fb5c9", fg = "#000000" })
hi(0, "MiniHipatterns_a06c4e_bg", { bg = "#a06c4e", fg = "#000000" })
hi(0, "MiniHipatterns_a0713c_bg", { bg = "#a0713c", fg = "#000000" })
hi(0, "MiniHipatterns_a0a0a0_bg", { bg = "#a0a0a0", fg = "#000000" })
hi(0, "MiniHipatterns_a292a3_bg", { bg = "#a292a3", fg = "#000000" })
hi(0, "MiniHipatterns_b1b1d2_bg", { bg = "#b1b1d2", fg = "#000000" })
hi(0, "MiniHipatterns_b23b34_bg", { bg = "#b23b34", fg = "#ffffff" })
hi(0, "MiniHipatterns_b73242_bg", { bg = "#b73242", fg = "#ffffff" })
hi(0, "MiniHipatterns_c87b2e_bg", { bg = "#c87b2e", fg = "#000000" })
hi(0, "MiniHipatterns_c8c8c8_bg", { bg = "#c8c8c8", fg = "#000000" })
hi(0, "MiniHipatterns_d4d4f0_bg", { bg = "#d4d4f0", fg = "#000000" })
hi(0, "MiniHipatterns_d5dcd2_bg", { bg = "#d5dcd2", fg = "#000000" })
hi(0, "MiniHipatterns_d7474b_bg", { bg = "#d7474b", fg = "#000000" })
hi(0, "MiniHipatterns_d8d8d8_bg", { bg = "#d8d8d8", fg = "#000000" })
hi(0, "MiniHipatterns_d9a594_bg", { bg = "#d9a594", fg = "#000000" })
hi(0, "MiniHipatterns_debe97_bg", { bg = "#debe97", fg = "#000000" })
hi(0, "MiniHipatterns_e2dcd4_bg", { bg = "#e2dcd4", fg = "#000000" })
hi(0, "MiniHipatterns_e46876_bg", { bg = "#e46876", fg = "#000000" })
hi(0, "MiniHipatterns_e6c2c7_bg", { bg = "#e6c2c7", fg = "#000000" })
hi(0, "MiniHipatterns_e7e7e7_bg", { bg = "#e7e7e7", fg = "#000000" })
hi(0, "MiniHipatterns_e84444_bg", { bg = "#e84444", fg = "#000000" })
hi(0, "MiniHipatterns_eeeeee_bg", { bg = "#eeeeee", fg = "#000000" })
hi(0, "MiniHipatterns_f6f6f6_bg", { bg = "#f6f6f6", fg = "#000000" })
hi(0, "MiniPickCursor", { blend = 100, nocombine = true })
hi(0, "ModeMsg", { bold = true, fg = "#fbc19d" })
hi(0, "MoreMsg", { bold = true, fg = "#a5b4fc" })
hi(0, "NonText", { fg = "#111827" })
hi(0, "Normal", { bg = "#111827", fg = "#f9fafb" })
hi(0, "NormalFloat", { bg = "#0e1420", fg = "#f9fafb" })
hi(0, "NormalNC", { bg = "#111827", fg = "#f9fafb" })
hi(0, "NormalSB", { bg = "#111726", fg = "#f9fafb" })
hi(0, "Number", { fg = "#fbc19d" })
hi(0, "Operator", { fg = "#fecdd3" })
hi(0, "Pmenu", { bg = "#0e1420", fg = "#f9fafb" })
hi(0, "PmenuSel", { bg = "#374151" })
hi(0, "PmenuThumb", { bg = "#374151" })
hi(0, "PreProc", { fg = "#ddd6fe" })
hi(0, "Question", { link = "MoreMsg" })
hi(0, "QuickFixLine", { link = "CursorLine" })
hi(0, "Repeat", { fg = "#fecdd3" })
hi(0, "Search", { bg = "#a5b4fc", bold = true, fg = "#111827" })
hi(0, "SignColumn", { fg = "#6b7280" })
hi(0, "Special", { fg = "#bae6fd" })
hi(0, "SpecialKey", { link = "NonText" })
hi(0, "SpellBad", { bg = "#fca5a5", bold = true, fg = "#111827", sp = "#fca5a5", undercurl = true })
hi(0, "SpellCap", { bg = "#fbc19d", bold = true, fg = "#111827", sp = "#fbc19d", undercurl = true })
hi(0, "SpellLocal", { bg = "#a5b4fc", bold = true, fg = "#111827", sp = "#a5b4fc", undercurl = true })
hi(0, "SpellRare", { bg = "#a5b4fc", bold = true, fg = "#111827", sp = "#a5b4fc", undercurl = true })
hi(0, "Statement", { fg = "#fca5a5" })
hi(0, "StatusLine", { bg = "#111827", fg = "#e5e7eb" })
hi(0, "StatusLineNC", { bg = "#111827", fg = "#f9fafb" })
hi(0, "String", { fg = "#b5e8b0" })
hi(0, "Substitute", { bg = "#fca5a5", bold = true, fg = "#111827" })
hi(0, "TabLine", { bg = "#111827", fg = "#e5e7eb" })
hi(0, "TabLineFill", { bg = "#111827" })
hi(0, "TabLineSel", { bg = "#1f2937" })
hi(0, "Title", { fg = "#bae6fd" })
hi(0, "Todo", { bold = true, fg = "#a5b4fc" })
hi(0, "Type", { fg = "#fecdd3" })
hi(0, "Visual", { bg = "#374151" })
hi(0, "WarningMsg", { fg = "#fbc19d" })
hi(0, "Whitespace", { fg = "#374151" })
hi(0, "WildMenu", { link = "Pmenu" })
hi(0, "WinBar", { bg = "#111827", bold = true })
hi(0, "WinBarNC", { bg = "#0e1420", bold = true })
hi(0, "WinSeparator", { fg = "#6b7280" })
hi(0, "diffAdded", { fg = "#98bc99" })
hi(0, "diffChanged", { fg = "#fbc19d" })
hi(0, "diffFile", { fg = "#a5b4fc" })
hi(0, "diffIndexLine", { fg = "#ddd6fe" })
hi(0, "diffLine", { fg = "#fbc19d" })
hi(0, "diffNewFile", { fg = "#b5e8b0" })
hi(0, "diffOldFile", { fg = "#fbc19d" })
hi(0, "diffRemoved", { fg = "#fca5a5" })
hi(0, "lCursor", { link = "Cursor" })
hi(0, "qfFileName", { link = "Directory" })
hi(0, "qfLineNr", { link = "LineNr" })

-- Terminal colors
local g = vim.g

g.terminal_color_0 = "#e7e7e7"
g.terminal_color_1 = "#b23b34"
g.terminal_color_2 = "#6a824f"
g.terminal_color_3 = "#a0713c"
g.terminal_color_4 = "#537788"
g.terminal_color_5 = "#938aa9"
g.terminal_color_6 = "#586e62"
g.terminal_color_7 = "#a0a0a0"
g.terminal_color_8 = "#d8d8d8"
g.terminal_color_9 = "#e46876"
g.terminal_color_10 = "#87a987"
g.terminal_color_11 = "#debe97"
g.terminal_color_12 = "#7fb4ca"
g.terminal_color_13 = "#b1b1d2"
g.terminal_color_14 = "#7aa89f"
g.terminal_color_15 = "#1b1b1b"
